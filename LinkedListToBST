/*
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode SortedListToBST(ListNode head) {
        
        if(head == null)
            return null;
        int len = GetListLen(head);
        TreeNode Root = HelperListToBST(head,0,len-1);
        
        return Root;
    }
    
    public static TreeNode HelperListToBST(ListNode head, int start, int end)
    {
        if(start>end)
            return null;
        
        int mid = (end+start)>>1,
            count = 0;
        ListNode TmpHead = head;
        
        while(count < mid)
        {
            
            
            TmpHead = TmpHead.next;
            
            count++;
        }
        
        TreeNode Root = new TreeNode(TmpHead.val);
        Root.left = HelperListToBST(head,start,mid-1);
        Root.right = HelperListToBST(head,mid+1,end);
            
        return Root;
    }
    
    
    public static int GetListLen(ListNode head)
    {
        
        int CountNode = 0;
        
        ListNode TempHead = head;
        
        while(TempHead!=null)
        {
            CountNode++;
            TempHead = TempHead.next;
        }
        
        return CountNode;
    }
    
}
