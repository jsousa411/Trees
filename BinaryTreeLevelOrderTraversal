/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public static IList<IList<int>> NodeSet;
    public IList<IList<int>> LevelOrder(TreeNode root) {
        
        NodeSet = new List<IList<int>>();
        
        if(root == null)
            return NodeSet;
        
        // start recursive call of first level node 
        HelperLevelOrder(root,0);
        
        return NodeSet;// retur all sets
        
    }
    
    public static void HelperLevelOrder(TreeNode root, int level)
    {
        if(root == null)
            return;
        
        // if level doe not have a list, add a list
        if(level >= NodeSet.Count)
        {
            NodeSet.Add(new List<int>());
        }
        
        // Add value of nodes at this level
        NodeSet[level].Add(root.val);
        
        //recursive call to next level
        if(root.left!=null)HelperLevelOrder(root.left,level+1);
        if(root.right!=null)HelperLevelOrder(root.right,level+1);
        
    }
}
