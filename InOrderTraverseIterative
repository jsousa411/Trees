// Traverses a binary search tree in O(n) complexity time iterative
// It uses O(n) for extra space for stack and hash list to keep track of visited nodes
/*

Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public static IList<int> Numbers;
    public IList<int> InorderTraversal(TreeNode root) {
        
         Numbers = new List<int>();
        
        if(root == null)
            return Numbers;
        
        
        //HelperTraverse(root); // recursive
        HelperTraverseIterate(root); // iterative
        
        return Numbers;
        
    }
    
    public static void HelperTraverse(TreeNode root)
    {
        if(root == null)
            return ;
        
        
        if(root.left!=null) HelperTraverse(root.left);
        
        Numbers.Add(root.val);
        
        if(root.right!=null) HelperTraverse(root.right);
        
            
    }
    
    
    public static void HelperTraverseIterate(TreeNode root)
    {
        
        Stack<TreeNode> S = new Stack<TreeNode>();
        Dictionary<TreeNode,int> Visited = new Dictionary<TreeNode,int>();
        
        if(root == null)
            return;
        
        S.Push(root);
        
        while(S.Count>0)
        {
            TreeNode CurrentNode = S.Peek();
            var nodeX = CurrentNode.left;
            
            while(nodeX!=null && !Visited.ContainsKey(nodeX))
            {
                S.Push(nodeX);
                nodeX = nodeX.left;
            }
            
            CurrentNode = S.Pop();
            //Console.WriteLine($"Value of current node is {CurrentNode.val}");
            Visited.Add(CurrentNode,CurrentNode.val);
            Numbers.Add(CurrentNode.val);
            
            if(CurrentNode.right!=null)
                S.Push(CurrentNode.right);
        }
        
    }
}
